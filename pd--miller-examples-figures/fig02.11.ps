%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Miller Puckette
%%Title: Window .x81efaa0.c
%%CreationDate: Wed Aug 23 08:06:04 2006
%%BoundingBox: 140 226 472 567
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Courier-Bold
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Courier-Bold
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
0.846 0.846 scale
-195 -200 translate
-1 401 moveto 391 401 lineto 391 0 lineto -1 0 lineto closepath clip newpath
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
230 386 [
[(original)]
] 13 -0 0 0 false DrawText
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
292 366 [
[(interpolated)]
] 13 -0 0 0 false DrawText
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
319 387 [
[(best fit)]
] 13 -0 0 0 false DrawText
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
320 110 [
[(error)]
] 13 -0 0 0 false DrawText
grestore
gsave
14 152 moveto
14 12 lineto
314 12 lineto
314 152 lineto
14 152 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
14 106.5 moveto
17 96.64281 lineto
20 88.067635 lineto
23 80.766828 lineto
26 74.727805 lineto
29 69.93298 lineto
32 66.35976 lineto
35 63.980916 lineto
38 62.764315 lineto
41 62.673385 lineto
44 63.667036 lineto
47 65.699871 lineto
50 68.72247 lineto
53 72.681495 lineto
56 77.519825 lineto
59 83.17699 lineto
62 89.58919 lineto
65 93.189744 lineto
68 90.4091 lineto
71 88.175435 lineto
74 86.41469 lineto
77 85.05095 lineto
80 84.0067 lineto
83 83.203198 lineto
86 82.560696 lineto
89 81.998944 lineto
92 81.437256 lineto
95 80.79494 lineto
98 79.991717 lineto
101 78.947888 lineto
104 77.584645 lineto
107 75.824565 lineto
110 73.59167 lineto
113 70.8119 lineto
116 74.412245 lineto
119 80.823864 lineto
122 86.480525 lineto
125 91.318435 lineto
128 95.27704 lineto
131 98.299395 lineto
134 100.332054 lineto
137 101.3256 lineto
140 101.2346 lineto
143 100.017999 lineto
146 97.639225 lineto
149 94.066145 lineto
152 89.271425 lineto
155 83.232567 lineto
158 75.93198 lineto
161 67.356945 lineto
164 57.5 lineto
167 67.357365 lineto
170 75.93275 lineto
173 83.233715 lineto
176 89.273 lineto
179 94.067965 lineto
182 97.64122 lineto
185 100.020135 lineto
188 101.2367 lineto
191 101.327665 lineto
194 100.333839 lineto
197 98.300794 lineto
200 95.277915 lineto
203 91.318645 lineto
206 86.47979 lineto
209 80.82211 lineto
212 74.409305 lineto
215 70.808645 lineto
218 73.590095 lineto
221 75.824495 lineto
224 77.58587 lineto
227 78.950159 lineto
230 79.994854 lineto
233 80.798656 lineto
236 81.441292 lineto
239 82.003255 lineto
242 82.564886 lineto
245 83.206989 lineto
248 84.009903 lineto
251 85.053351 lineto
254 86.416055 lineto
257 88.175505 lineto
260 90.40763 lineto
263 93.186525 lineto
266 89.58632 lineto
269 83.175405 lineto
272 77.51923 lineto
275 72.68181 lineto
278 68.72338 lineto
281 65.701411 lineto
284 63.668821 lineto
287 62.67538 lineto
290 62.76645 lineto
293 63.983015 lineto
296 66.361755 lineto
299 69.934765 lineto
302 74.729345 lineto
305 80.768081 lineto
308 88.068475 lineto
311 106.5 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
14 391 moveto
14 190 lineto
314 190 lineto
314 391 lineto
14 391 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
14 391 moveto
17 390.802703 lineto
20 390.211502 lineto
23 389.2288 lineto
26 387.858501 lineto
29 386.105898 lineto
32 383.978102 lineto
35 381.483302 lineto
38 378.631398 lineto
41 375.433699 lineto
44 371.902803 lineto
47 368.052599 lineto
50 363.8984 lineto
53 359.456501 lineto
56 354.744402 lineto
59 349.780801 lineto
62 344.585202 lineto
65 339.178101 lineto
68 333.5809 lineto
71 327.8157 lineto
74 321.905199 lineto
77 315.872801 lineto
80 309.742099 lineto
83 303.5375 lineto
86 297.2835 lineto
89 291.004633 lineto
92 284.72576 lineto
95 278.4716 lineto
98 272.267001 lineto
101 266.1362 lineto
104 260.103599 lineto
107 254.192901 lineto
110 248.4274 lineto
113 242.83 lineto
116 237.422601 lineto
119 232.226703 lineto
122 227.262703 lineto
125 222.5503 lineto
128 218.108002 lineto
131 213.953302 lineto
134 210.102699 lineto
137 206.571302 lineto
140 203.373102 lineto
143 200.520698 lineto
146 198.025403 lineto
149 195.896897 lineto
152 194.143799 lineto
155 192.772898 lineto
158 191.789601 lineto
161 191.197899 lineto
164 191 lineto
167 191.196701 lineto
170 191.7873 lineto
173 192.7694 lineto
176 194.139198 lineto
179 195.891199 lineto
182 198.018501 lineto
185 200.5128 lineto
188 203.364203 lineto
191 206.561301 lineto
194 210.091803 lineto
197 213.9415 lineto
200 218.0953 lineto
203 222.5368 lineto
206 227.248499 lineto
209 232.2117 lineto
212 237.407002 lineto
215 242.813799 lineto
218 248.410699 lineto
221 254.175699 lineto
224 260.086 lineto
227 266.1183 lineto
230 272.2488 lineto
233 278.4533 lineto
236 284.70729 lineto
239 290.986078 lineto
242 297.26497 lineto
245 303.5191 lineto
248 309.723901 lineto
251 315.8548 lineto
254 321.887601 lineto
257 327.798501 lineto
260 333.564201 lineto
263 339.1619 lineto
266 344.569502 lineto
269 349.765799 lineto
272 354.730103 lineto
275 359.442899 lineto
278 363.885698 lineto
281 368.040797 lineto
284 371.891901 lineto
287 375.423798 lineto
290 378.622499 lineto
293 381.475398 lineto
296 383.9712 lineto
299 386.1002 lineto
302 387.8539 lineto
305 389.225403 lineto
308 390.209201 lineto
311 390.801499 lineto
314 391 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
14 391 moveto
17 388.0002 lineto
20 385.000298 lineto
23 382.000497 lineto
26 379.000602 lineto
29 376.000801 lineto
32 373.001001 lineto
35 370.001099 lineto
38 367.001298 lineto
41 364.001403 lineto
44 361.001602 lineto
47 358.001802 lineto
50 355.0019 lineto
53 352.0021 lineto
56 349.002198 lineto
59 346.002397 lineto
62 343.002603 lineto
65 339.002699 lineto
68 333.002901 lineto
71 327.003 lineto
74 321.003199 lineto
77 315.0034 lineto
80 309.0035 lineto
83 303.0037 lineto
86 297.00385 lineto
89 291.004007 lineto
92 285.00417 lineto
95 279.0043 lineto
98 273.004499 lineto
101 267.004601 lineto
104 261.0048 lineto
107 255.004999 lineto
110 249.0051 lineto
113 243.0053 lineto
116 239.005098 lineto
119 236.004803 lineto
122 233.004502 lineto
125 230.004201 lineto
128 227.0039 lineto
131 224.003497 lineto
134 221.003202 lineto
137 218.002901 lineto
140 215.0026 lineto
143 212.002197 lineto
146 209.001902 lineto
149 206.001601 lineto
152 203.0013 lineto
155 200.000999 lineto
158 197.000602 lineto
161 194.000301 lineto
164 191 lineto
167 193.999401 lineto
170 196.998701 lineto
173 199.998102 lineto
176 202.997402 lineto
179 205.996803 lineto
182 208.996198 lineto
185 211.995498 lineto
188 214.994899 lineto
191 217.994199 lineto
194 220.9936 lineto
197 223.992899 lineto
200 226.992301 lineto
203 229.991702 lineto
206 232.991001 lineto
209 235.990402 lineto
212 238.989702 lineto
215 242.989299 lineto
218 248.9891 lineto
221 254.9889 lineto
224 260.988799 lineto
227 266.9886 lineto
230 272.9885 lineto
233 278.9883 lineto
236 284.98815 lineto
239 290.987982 lineto
242 296.98782 lineto
245 302.9877 lineto
248 308.9875 lineto
251 314.987401 lineto
254 320.987201 lineto
257 326.986999 lineto
260 332.986901 lineto
263 338.986701 lineto
266 342.987201 lineto
269 345.988003 lineto
272 348.988799 lineto
275 351.9896 lineto
278 354.990402 lineto
281 357.991198 lineto
284 360.992 lineto
287 363.992802 lineto
290 366.993598 lineto
293 369.994399 lineto
296 372.995201 lineto
299 375.996003 lineto
302 378.996799 lineto
305 381.997601 lineto
308 384.998402 lineto
311 387.999198 lineto
314 391 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
14 384.000001 moveto
17 383.816502 lineto
20 383.266703 lineto
23 382.352803 lineto
26 381.078402 lineto
29 379.448501 lineto
32 377.469603 lineto
35 375.149402 lineto
38 372.497198 lineto
41 369.523302 lineto
44 366.239599 lineto
47 362.658897 lineto
50 358.795497 lineto
53 354.664502 lineto
56 350.282303 lineto
59 345.666102 lineto
62 340.834201 lineto
65 335.8057 lineto
68 330.600301 lineto
71 325.238601 lineto
74 319.741899 lineto
77 314.1317 lineto
80 308.4302 lineto
83 302.6599 lineto
86 296.84366 lineto
89 291.004309 lineto
92 285.16496 lineto
95 279.3486 lineto
98 273.5783 lineto
101 267.8767 lineto
104 262.266299 lineto
107 256.769401 lineto
110 251.407501 lineto
113 246.2019 lineto
116 241.173101 lineto
119 236.340902 lineto
122 231.724301 lineto
125 227.341798 lineto
128 223.210398 lineto
131 219.346598 lineto
134 215.765497 lineto
137 212.481299 lineto
140 209.506998 lineto
143 206.854198 lineto
146 204.533598 lineto
149 202.554098 lineto
152 200.923702 lineto
155 199.648801 lineto
158 198.7344 lineto
161 198.183999 lineto
164 197.999999 lineto
167 198.182997 lineto
170 198.732201 lineto
173 199.6456 lineto
176 200.9195 lineto
179 202.548799 lineto
182 204.527203 lineto
185 206.846902 lineto
188 209.498701 lineto
191 212.472001 lineto
194 215.7554 lineto
197 219.335601 lineto
200 223.198602 lineto
203 227.329198 lineto
206 231.711099 lineto
209 236.3269 lineto
212 241.158501 lineto
215 246.186799 lineto
218 251.3919 lineto
221 256.7534 lineto
224 262.249899 lineto
227 267.86 lineto
230 273.561401 lineto
233 279.3316 lineto
236 285.14778 lineto
239 290.987052 lineto
242 296.82642 lineto
245 302.6428 lineto
248 308.4132 lineto
251 314.115 lineto
254 319.725499 lineto
257 325.2226 lineto
260 330.584699 lineto
263 335.790599 lineto
266 340.819699 lineto
269 345.652202 lineto
272 350.268999 lineto
275 354.651901 lineto
278 358.783701 lineto
281 362.6479 lineto
284 366.229502 lineto
287 369.514099 lineto
290 372.488901 lineto
293 375.142101 lineto
296 377.463302 lineto
299 379.443202 lineto
302 381.074098 lineto
305 382.349602 lineto
308 383.264599 lineto
311 383.815399 lineto
314 384.000001 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
restore showpage

%%Trailer
end
%%EOF
