%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Miller Puckette
%%Title: Window .x81ef498.c
%%CreationDate: Wed Aug 23 08:06:49 2006
%%BoundingBox: 188 353 424 440
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Courier-Bold
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Courier-Bold
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
0.846 0.846 scale
-138 -50 translate
-1 101 moveto 277 101 lineto 277 0 lineto -1 0 lineto closepath clip newpath
gsave
20 51 moveto
240 51 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
25 91 moveto
28 90.5075 lineto
31 89.042297 lineto
34 86.640297 lineto
37 83.360703 lineto
40 79.284302 lineto
43 74.511398 lineto
46 69.159698 lineto
49 63.360699 lineto
52 57.257401 lineto
55 51 lineto
58 44.742699 lineto
61 38.6394 lineto
64 32.840401 lineto
67 27.4886 lineto
70 22.715799 lineto
73 18.6394 lineto
76 15.3598 lineto
79 12.9578 lineto
82 11.4925 lineto
85 11 lineto
88 11.4924 lineto
91 12.9577 lineto
94 15.3597 lineto
97 18.639299 lineto
100 22.715599 lineto
103 27.488501 lineto
106 32.8403 lineto
109 38.639198 lineto
112 44.7425 lineto
115 50.999802 lineto
118 57.257198 lineto
121 63.3605 lineto
124 69.1595 lineto
127 74.511299 lineto
130 79.284103 lineto
133 83.360603 lineto
136 86.640198 lineto
139 89.042198 lineto
142 90.5075 lineto
145 91 lineto
148 90.507599 lineto
151 89.042297 lineto
154 86.640404 lineto
157 83.360802 lineto
160 79.284401 lineto
163 74.511597 lineto
166 69.159798 lineto
169 63.360901 lineto
172 57.257599 lineto
175 51.000301 lineto
178 44.742901 lineto
181 38.639599 lineto
184 32.840599 lineto
187 27.4888 lineto
190 22.7159 lineto
193 18.6395 lineto
196 15.3599 lineto
199 12.9578 lineto
202 11.4925 lineto
205 11 lineto
208 11.4924 lineto
211 12.9576 lineto
214 15.3596 lineto
217 18.639099 lineto
220 22.7155 lineto
223 27.4883 lineto
226 32.840099 lineto
229 38.639 lineto
232 44.742298 lineto
238 57.257 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
25 91 moveto
28 86.640297 lineto
31 74.511398 lineto
34 57.257401 lineto
37 38.6394 lineto
40 22.715799 lineto
43 12.9578 lineto
46 11.4924 lineto
49 18.639299 lineto
52 32.8403 lineto
55 50.999802 lineto
58 69.1595 lineto
61 83.360603 lineto
64 90.5075 lineto
67 89.042297 lineto
70 79.284401 lineto
73 63.360901 lineto
76 44.742901 lineto
79 27.4888 lineto
82 15.3599 lineto
85 11 lineto
88 15.3596 lineto
91 27.4883 lineto
94 44.742298 lineto
97 63.360298 lineto
100 79.283997 lineto
103 89.042099 lineto
106 90.507599 lineto
109 83.361 lineto
112 69.160004 lineto
115 51.0005 lineto
118 32.840799 lineto
121 18.639601 lineto
124 11.4925 lineto
127 12.9576 lineto
130 22.715401 lineto
133 38.638901 lineto
136 57.256802 lineto
139 74.510902 lineto
142 86.639999 lineto
145 91 lineto
148 86.640503 lineto
151 74.511902 lineto
154 57.257999 lineto
157 38.639999 lineto
160 22.7162 lineto
163 12.958 lineto
166 11.4924 lineto
169 18.638901 lineto
172 32.839701 lineto
175 50.999199 lineto
178 69.158997 lineto
181 83.360199 lineto
184 90.507401 lineto
187 89.042503 lineto
190 79.284897 lineto
193 63.361599 lineto
196 44.7435 lineto
199 27.4893 lineto
202 15.3601 lineto
205 11 lineto
208 15.3593 lineto
211 27.487801 lineto
214 44.741699 lineto
217 63.359798 lineto
220 79.283501 lineto
223 89.041901 lineto
226 90.507698 lineto
229 83.361298 lineto
232 69.160599 lineto
238 32.841299 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
25 51 moveto
25 91 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
55 49 moveto
55 53 lineto
0 setlinecap
1 setlinejoin
4 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
85 51 moveto
85 11 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
115 49 moveto
115 53 lineto
0 setlinecap
1 setlinejoin
4 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
145 51 moveto
145 91 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
175 49 moveto
175 53 lineto
0 setlinecap
1 setlinejoin
4 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
205 51 moveto
205 11 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
235 49 moveto
235 53 lineto
0 setlinecap
1 setlinejoin
4 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
22 47 [
[(0  )]
] 13 -0 0 0 false DrawText
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
244 53 [
[(7  )]
] 13 -0 0 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
