%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Miller Puckette
%%Title: Window .x98ee088.c
%%CreationDate: Thu Feb 24 10:40:58 2005
%%BoundingBox: 146 329 467 464
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Courier-Bold
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Courier-Bold
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
0.846 0.846 scale
-188 -79 translate
-1 159 moveto 378 159 lineto 378 0 lineto -1 0 lineto closepath clip newpath
gsave
327 46 moveto
27 46 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
327 46 moveto
324 49 lineto
327 46 lineto
324 43 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
27 126 moveto
27 46 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
27 126 moveto
30 123 lineto
27 126 lineto
24 123 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
27 47.000084 moveto
28 48.010101 lineto
29 49.015442 lineto
30 49.991219 lineto
31 50.91275 lineto
32 51.756203 lineto
33 52.499123 lineto
34 53.121063 lineto
35 53.604103 lineto
36 53.933304 lineto
37 54.097183 lineto
38 54.08802 lineto
39 53.902184 lineto
40 53.540222 lineto
41 53.007004 lineto
42 52.311691 lineto
43 51.467598 lineto
44 50.491982 lineto
45 49.40567 lineto
46 48.232742 lineto
47 46.999916 lineto
48 45.736053 lineto
49 44.471474 lineto
50 43.237259 lineto
51 42.06459 lineto
52 40.983917 lineto
53 40.0243 lineto
54 39.212601 lineto
55 38.57283 lineto
56 38.125511 lineto
57 37.88707 lineto
58 37.869362 lineto
59 38.079224 lineto
60 38.518234 lineto
61 39.182472 lineto
62 40.062492 lineto
63 41.143387 lineto
64 42.404961 lineto
65 43.822052 lineto
66 45.36496 lineto
67 47.000084 lineto
68 48.69046 lineto
69 50.396599 lineto
70 52.07737 lineto
71 53.690758 lineto
72 55.194946 lineto
73 56.54921 lineto
74 57.714897 lineto
75 58.656502 lineto
76 59.3423 lineto
77 59.745499 lineto
78 59.845001 lineto
79 59.625702 lineto
80 59.079697 lineto
81 58.2061 lineto
82 57.011803 lineto
83 55.511169 lineto
84 53.726433 lineto
85 51.687286 lineto
86 49.430603 lineto
87 46.999916 lineto
88 44.444748 lineto
89 41.819839 lineto
90 39.184196 lineto
91 36.600098 lineto
92 34.131798 lineto
93 31.844597 lineto
94 29.803398 lineto
95 28.071304 lineto
96 26.708702 lineto
97 25.7715 lineto
98 25.310402 lineto
99 25.3694 lineto
100 25.9851 lineto
101 27.185402 lineto
102 28.989098 lineto
103 31.4049 lineto
104 34.431297 lineto
105 38.056168 lineto
106 42.256851 lineto
107 47.000084 lineto
108 52.242432 lineto
109 57.930801 lineto
110 64.003296 lineto
111 70.389801 lineto
112 77.013397 lineto
113 83.791306 lineto
114 90.636292 lineto
115 97.458099 lineto
116 104.164902 lineto
117 110.664597 lineto
118 116.867096 lineto
119 122.684692 lineto
120 128.034897 lineto
121 132.840607 lineto
122 137.032593 lineto
123 140.5495 lineto
124 143.340103 lineto
125 145.363297 lineto
126 146.589294 lineto
127 147 lineto
128 146.589294 lineto
129 145.363297 lineto
130 143.340103 lineto
131 140.549591 lineto
132 137.032593 lineto
133 132.840698 lineto
134 128.034897 lineto
135 122.684692 lineto
136 116.867004 lineto
137 110.664597 lineto
138 104.164902 lineto
139 97.458191 lineto
140 90.636292 lineto
141 83.791397 lineto
142 77.013397 lineto
143 70.389801 lineto
144 64.003296 lineto
145 57.930801 lineto
146 52.242371 lineto
147 47.000084 lineto
148 42.256851 lineto
149 38.05619 lineto
150 34.431297 lineto
151 31.4049 lineto
152 28.989098 lineto
153 27.185402 lineto
154 25.9851 lineto
155 25.3694 lineto
156 25.310402 lineto
157 25.7715 lineto
158 26.708702 lineto
159 28.071304 lineto
160 29.803398 lineto
161 31.844597 lineto
162 34.131798 lineto
163 36.600098 lineto
164 39.184212 lineto
165 41.819839 lineto
166 44.444763 lineto
167 46.999916 lineto
168 49.430618 lineto
169 51.687286 lineto
170 53.726433 lineto
171 55.511162 lineto
172 57.011803 lineto
173 58.2062 lineto
174 59.079697 lineto
175 59.625702 lineto
176 59.845001 lineto
177 59.745499 lineto
178 59.3423 lineto
179 58.656502 lineto
180 57.714897 lineto
181 56.54921 lineto
182 55.194946 lineto
183 53.690773 lineto
184 52.077393 lineto
185 50.396622 lineto
186 48.69046 lineto
187 47.000084 lineto
188 45.36496 lineto
189 43.822037 lineto
190 42.404953 lineto
191 41.143387 lineto
192 40.062492 lineto
193 39.182472 lineto
194 38.518219 lineto
195 38.079224 lineto
196 37.869362 lineto
197 37.88707 lineto
198 38.125511 lineto
199 38.572823 lineto
200 39.212593 lineto
201 40.0243 lineto
202 40.983917 lineto
203 42.064568 lineto
204 43.237251 lineto
205 44.471458 lineto
206 45.736076 lineto
207 46.999916 lineto
208 48.232742 lineto
209 49.405678 lineto
210 50.491989 lineto
211 51.467598 lineto
212 52.311691 lineto
213 53.007004 lineto
214 53.540222 lineto
215 53.902184 lineto
216 54.08802 lineto
217 54.097183 lineto
218 53.933304 lineto
219 53.604103 lineto
220 53.121071 lineto
221 52.499123 lineto
222 51.756203 lineto
223 50.912773 lineto
224 49.991211 lineto
225 49.015427 lineto
226 48.010078 lineto
227 47.000084 lineto
228 46.009895 lineto
229 45.06311 lineto
230 44.181763 lineto
231 43.385979 lineto
232 42.693336 lineto
233 42.118683 lineto
234 41.673752 lineto
235 41.36692 lineto
236 41.203087 lineto
237 41.18364 lineto
238 41.30648 lineto
239 41.566071 lineto
240 41.953743 lineto
241 42.457848 lineto
242 43.064148 lineto
243 43.756187 lineto
244 44.515717 lineto
245 45.323174 lineto
246 46.15815 lineto
247 46.999916 lineto
248 47.82795 lineto
249 48.622353 lineto
250 49.364357 lineto
251 50.036812 lineto
252 50.624451 lineto
253 51.114357 lineto
254 51.496132 lineto
255 51.762169 lineto
256 51.907791 lineto
257 51.931282 lineto
258 51.833923 lineto
259 51.619888 lineto
260 51.296127 lineto
261 50.872139 lineto
262 50.35968 lineto
263 49.772537 lineto
264 49.126068 lineto
265 48.436852 lineto
266 47.722275 lineto
267 47.000084 lineto
268 46.287964 lineto
269 45.603119 lineto
270 44.961868 lineto
271 44.379189 lineto
272 43.868507 lineto
273 43.441277 lineto
274 43.106812 lineto
275 42.871979 lineto
276 42.741219 lineto
277 42.716339 lineto
278 42.796562 lineto
279 42.978569 lineto
280 43.256622 lineto
281 43.622719 lineto
282 44.066803 lineto
283 44.577072 lineto
284 45.140251 lineto
285 45.741951 lineto
286 46.367012 lineto
287 46.999916 lineto
288 47.62513 lineto
289 48.227493 lineto
290 48.792572 lineto
291 49.307053 lineto
292 49.758957 lineto
293 50.138023 lineto
294 50.435829 lineto
295 50.646088 lineto
296 50.764648 lineto
297 50.789703 lineto
298 50.721703 lineto
299 50.563339 lineto
300 50.319542 lineto
301 49.9972 lineto
302 49.605072 lineto
303 49.153503 lineto
304 48.654182 lineto
305 48.119812 lineto
306 47.563843 lineto
307 47.000084 lineto
308 46.442383 lineto
309 45.904297 lineto
310 45.398773 lineto
311 44.937798 lineto
312 44.532181 lineto
313 44.191238 lineto
314 43.922653 lineto
315 43.732193 lineto
316 43.623741 lineto
317 43.599098 lineto
318 43.65802 lineto
319 43.79821 lineto
320 44.015427 lineto
321 44.303589 lineto
322 44.654938 lineto
323 45.06028 lineto
324 45.509148 lineto
325 45.99015 lineto
326 46.491226 lineto
327 46.999916 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
27 40 moveto
27 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
47 40 moveto
47 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
67 40 moveto
67 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
87 40 moveto
87 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
107 40 moveto
107 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
127 40 moveto
127 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
147 40 moveto
147 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
167 40 moveto
167 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
187 40 moveto
187 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
207 40 moveto
207 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
227 40 moveto
227 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
247 40 moveto
247 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
267 40 moveto
267 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
287 40 moveto
287 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
307 40 moveto
307 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
327 40 moveto
327 50 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
245 27 [
[(frequency \050bins\051)]
] 13 -0 0 0 false DrawText
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
126 36 [
[(0  )]
] 13 -0 0 0 false DrawText
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
20 35 [
[(-5 )]
] 13 -0 0 0 false DrawText
grestore
gsave
/Courier-Bold findfont 11.3 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
226 35 [
[(5  )]
] 13 -0 0 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
