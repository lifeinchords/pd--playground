%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Miller Puckette
%%Title: Window .x8f64800.c
%%CreationDate: Sat Jul  9 18:47:15 2005
%%BoundingBox: 146 349 467 443
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
0.846 0.846 scale
-188 -55 translate
-1 110 moveto 378 110 lineto 378 0 lineto -1 0 lineto closepath clip newpath
gsave
187 55 moveto
187 59 lineto
189 59 lineto
189 55 lineto
187 55 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
187 55 moveto
187 59 lineto
189 59 lineto
189 55 lineto
187 55 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
337 55 moveto
337 59 lineto
339 59 lineto
339 55 lineto
337 55 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
337 55 moveto
337 59 lineto
339 59 lineto
339 55 lineto
337 55 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
38 79.321503 moveto
39 79.476166 lineto
40 79.902618 lineto
41 80.497162 lineto
42 81.114403 lineto
43 81.601875 lineto
44 81.836624 lineto
45 81.75531 lineto
46 81.370659 lineto
47 80.770157 lineto
48 80.096954 lineto
49 79.516953 lineto
50 79.179375 lineto
51 79.179947 lineto
52 79.535263 lineto
53 80.174919 lineto
54 80.953903 lineto
55 81.683456 lineto
56 82.174103 lineto
57 82.281639 lineto
58 81.945656 lineto
59 81.211159 lineto
60 80.227371 lineto
61 79.221985 lineto
62 78.454903 lineto
63 78.159744 lineto
64 78.484879 lineto
65 79.446259 lineto
66 80.902908 lineto
67 82.561943 lineto
68 84.014153 lineto
69 84.795456 lineto
70 84.464233 lineto
71 82.680618 lineto
72 79.273315 lineto
73 74.281128 lineto
74 67.960495 lineto
75 60.756802 lineto
76 53.243652 lineto
77 46.03994 lineto
78 39.719208 lineto
79 34.726933 lineto
80 31.319542 lineto
81 29.535828 lineto
82 29.204523 lineto
83 29.985786 lineto
84 31.437956 lineto
85 33.096996 lineto
86 34.553665 lineto
87 35.515076 lineto
88 35.840256 lineto
89 35.545135 lineto
90 34.778069 lineto
91 33.77269 lineto
92 32.788893 lineto
93 32.054384 lineto
94 31.718372 lineto
95 31.825886 lineto
96 32.316509 lineto
97 33.046051 lineto
98 33.825043 lineto
99 34.464699 lineto
100 34.820045 lineto
101 34.820633 lineto
102 34.483078 lineto
103 33.903091 lineto
104 33.229885 lineto
105 32.629377 lineto
106 32.244698 lineto
107 32.163361 lineto
108 32.3981 lineto
109 32.885563 lineto
110 33.5028 lineto
111 34.097351 lineto
112 34.523819 lineto
113 34.678497 lineto
114 34.523857 lineto
115 34.097412 lineto
116 33.502884 lineto
117 32.885637 lineto
118 32.398153 lineto
119 32.163383 lineto
120 32.244677 lineto
121 32.629309 lineto
122 33.229805 lineto
123 33.903004 lineto
124 34.483021 lineto
125 34.820618 lineto
126 34.820072 lineto
127 34.464767 lineto
128 33.825123 lineto
129 33.04615 lineto
130 32.316591 lineto
131 31.825922 lineto
132 31.718357 lineto
133 32.054302 lineto
134 32.788788 lineto
135 33.772568 lineto
136 34.777954 lineto
137 35.545074 lineto
138 35.840248 lineto
139 35.515152 lineto
140 34.55381 lineto
141 33.097187 lineto
142 31.438169 lineto
143 29.985939 lineto
144 29.204569 lineto
145 29.535696 lineto
146 31.319242 lineto
147 34.726433 lineto
148 39.71854 lineto
149 46.039104 lineto
150 53.242744 lineto
151 60.755898 lineto
152 67.959656 lineto
153 74.280426 lineto
154 79.272797 lineto
155 82.68029 lineto
156 84.464119 lineto
157 84.795486 lineto
158 84.014282 lineto
159 82.562134 lineto
160 80.903107 lineto
161 79.446426 lineto
162 78.48497 lineto
163 78.15976 lineto
164 78.454826 lineto
165 79.221878 lineto
166 80.227234 lineto
167 81.211052 lineto
168 81.945602 lineto
169 82.281624 lineto
170 82.174149 lineto
171 81.683533 lineto
172 80.954002 lineto
173 80.175003 lineto
174 79.535324 lineto
175 79.179962 lineto
176 79.179352 lineto
177 79.516907 lineto
178 80.096878 lineto
179 80.770073 lineto
180 81.37059 lineto
181 81.755295 lineto
182 81.836639 lineto
183 81.601913 lineto
184 81.114456 lineto
185 80.497261 lineto
186 79.902679 lineto
187 79.476212 lineto
188 79.321503 lineto
189 79.476135 lineto
190 79.90255 lineto
191 80.497101 lineto
192 81.114319 lineto
193 81.601837 lineto
194 81.836617 lineto
195 81.755341 lineto
196 81.370728 lineto
197 80.770248 lineto
198 80.097046 lineto
199 79.517014 lineto
200 79.179375 lineto
201 79.179916 lineto
202 79.535202 lineto
203 80.174828 lineto
204 80.953819 lineto
205 81.68338 lineto
206 82.17408 lineto
207 82.281639 lineto
208 81.945709 lineto
209 81.211243 lineto
210 80.227493 lineto
211 79.222122 lineto
212 78.454971 lineto
213 78.15976 lineto
214 78.48481 lineto
215 79.446106 lineto
216 80.902687 lineto
217 82.561775 lineto
218 84.014023 lineto
219 84.79541 lineto
220 84.46434 lineto
221 82.680908 lineto
222 79.273827 lineto
223 74.28183 lineto
224 67.961304 lineto
225 60.757706 lineto
226 53.24453 lineto
227 46.040764 lineto
228 39.71991 lineto
229 34.727455 lineto
230 31.319862 lineto
231 29.535959 lineto
232 29.204489 lineto
233 29.985626 lineto
234 31.437748 lineto
235 33.096825 lineto
236 34.553524 lineto
237 35.515007 lineto
238 35.840256 lineto
239 35.545212 lineto
240 34.778175 lineto
241 33.772793 lineto
242 32.789011 lineto
243 32.054449 lineto
244 31.718386 lineto
245 31.825827 lineto
246 32.31641 lineto
247 33.045952 lineto
248 33.824928 lineto
249 34.464638 lineto
250 34.82003 lineto
251 34.820679 lineto
252 34.483124 lineto
253 33.903164 lineto
254 33.229942 lineto
255 32.629442 lineto
256 32.244732 lineto
257 32.163351 lineto
258 32.398056 lineto
259 32.885479 lineto
260 33.502731 lineto
261 34.097267 lineto
262 34.523773 lineto
263 34.678497 lineto
264 34.523888 lineto
265 34.097458 lineto
266 33.50296 lineto
267 32.885687 lineto
268 32.398193 lineto
269 32.163382 lineto
270 32.244663 lineto
271 32.629244 lineto
272 33.229702 lineto
273 33.902924 lineto
274 34.482948 lineto
275 34.820614 lineto
276 34.820084 lineto
277 34.464836 lineto
278 33.825199 lineto
279 33.046234 lineto
280 32.316624 lineto
281 31.825956 lineto
282 31.718346 lineto
283 32.054247 lineto
284 32.788689 lineto
285 33.772415 lineto
286 34.777843 lineto
287 35.545002 lineto
288 35.840271 lineto
289 35.515228 lineto
290 34.553978 lineto
291 33.09742 lineto
292 31.438341 lineto
293 29.986071 lineto
294 29.20459 lineto
295 29.535593 lineto
296 31.318926 lineto
297 34.725929 lineto
298 39.717876 lineto
299 46.038296 lineto
300 53.241852 lineto
301 60.754948 lineto
302 67.958817 lineto
303 74.279716 lineto
304 79.272278 lineto
305 82.679977 lineto
306 84.463966 lineto
307 84.795532 lineto
308 84.01445 lineto
309 82.562386 lineto
310 80.90329 lineto
311 79.446533 lineto
312 78.485031 lineto
313 78.15976 lineto
314 78.454765 lineto
315 79.221779 lineto
316 80.227142 lineto
317 81.210922 lineto
318 81.945503 lineto
319 82.281601 lineto
320 82.174164 lineto
321 81.683624 lineto
322 80.954071 lineto
323 80.175125 lineto
324 79.5354 lineto
325 79.179985 lineto
326 79.179329 lineto
327 79.516853 lineto
328 80.096817 lineto
329 80.769981 lineto
330 81.370514 lineto
331 81.755272 lineto
332 81.8367 lineto
333 81.601982 lineto
334 81.114525 lineto
335 80.497292 lineto
336 79.902771 lineto
337 79.321503 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
13 57 moveto
363 57 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
363 57 moveto
360 60 lineto
363 57 lineto
360 54 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
13 57 moveto
16 60 lineto
13 57 lineto
16 54 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
38 17 moveto
38 97 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
38 17 moveto
41 20 lineto
38 17 lineto
35 20 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
38 97 moveto
41 94 lineto
38 97 lineto
35 94 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
restore showpage

%%Trailer
end
%%EOF
